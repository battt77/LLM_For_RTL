You are a Verilog expert, and I need your help to write a Verilog code for an ALU (Arithmetic Logic Unit) module. Below are the detailed requirements:

Module Name: cpualu

Input Ports:
- ina: 32-bit input A.
- inb: 32-bit input B.
- sel: 4-bit selection signal to choose the operation.

Output Ports:
- out: 32-bit output result.

Function Description:
This module implements an ALU that can perform various arithmetic and logic operations based on the selection signal `sel`. The operations include addition, subtraction, bitwise AND, OR, XOR, logical shift left, logical shift right, and arithmetic shift right.

The module should use the `MuxKeyWithDefault` pre-defined module to implement a multiplexer with a default value. The `MuxKeyWithDefault` module has the following parameters:
1. The first parameter is the output width.
2. The second parameter is the width of the selection signal.
3. The third parameter is the default value.
4. The fourth parameter is the width of the input signals.

The operations to be implemented and their corresponding selection signals are as follows:
- 4'b0000: Addition
- 4'b0001: Subtraction
- 4'b0010: Bitwise AND
- 4'b0011: Bitwise OR
- 4'b0100: Bitwise XOR
- 4'b0101: Logical shift left
- 4'b0110: Logical shift right
- 4'b0111: Arithmetic shift right
- 4'b1110: Arithmetic shift right (alternative)

Please note the following when implementing the ALU:
- For addition and subtraction, use the following logic:
  - `assign inb1 = inb ^ {32{sel[0]}};`
  - `assign {borrow, addf} = ina + inb1 + {{31{1'b0}}, sel[0]};`
- For arithmetic shift right, use the following logic:
  - `assign sra = ({32{ina[31]}} << (6'd32 - {1'b0, inb[4:0]})) | (ina >> inb[4:0]);`

When instantiating the `MuxKeyWithDefault` module, use the following format:
- The four ports are `out`, `key`, `default_out`, and `lut`.
- Do not use the `.out(out)` writing type; instead, directly use the name of the port.
Below is a detailed description of the operations and how to implement them:

1. **Addition and Subtraction**:
   - Use the following logic to handle both addition and subtraction:
     ```verilog
     assign inb1 = inb ^ {32{sel[0]}};
     assign {borrow, addf} = ina + inb1 + {{31{1'b0}}, sel[0]};
     ```
   - This logic uses the `sel` signal to determine whether to add or subtract `inb` from `ina`.

2. **Bitwise Operations**:
   - Implement bitwise AND, OR, and XOR using the following logic:
     ```verilog
     assign andf = ina & inb;
     assign orf = ina | inb;
     assign xorf = ina ^ inb;
     ```

3. **Shift Operations**:
   - Implement logical shift left and right, and arithmetic shift right using the following logic:
     ```verilog
     assign sll = ina << inb[4:0];
     assign srl = ina >> inb[4:0];
     assign srai = ({32{ina[31]}} << (6'd32 - {1'b0, inb[4:0]})) | (ina >> inb[4:0]);
     assign sra = ({32{ina[31]}} << (6'd32 - {1'b0, inb[4:0]})) | (ina >> inb[4:0]);
     ```

4. **Multiplexer Implementation**:
   - Use the `MuxKeyWithDefault` module to select the appropriate operation based on the `sel` signal:
     ```verilog
     MuxKeyWithDefault #(9, 4, 32) alu1 (out, sel, 32'b0, {
         4'b0000, addf,
         4'b0001, addf,
         4'b0010, andf,
         4'b0011, orf,
         4'b0100, xorf,
         4'b0101, sll,
         4'b0110, srl,
         4'b0111, srai,
         4'b1110, sra
     });
     ```

Please write a functionally equivalent cpualu module based on the requirements above.